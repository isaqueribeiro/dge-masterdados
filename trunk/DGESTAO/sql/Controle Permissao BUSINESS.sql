/******************************************************************************/
/***               Generated by IBExpert 15/01/2015 09:38:04                ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE SYS_SISTEMA_ROTINA (
    SIS_COD  DMN_SMALLINT_NN NOT NULL /* DMN_SMALLINT_NN = SMALLINT DEFAULT 0 */,
    ROT_COD  DMN_VCHAR_10_KEY NOT NULL /* DMN_VCHAR_10_KEY = VARCHAR(10) NOT NULL */,
    ACESSO   DMN_LOGICO DEFAULT 1 /* DMN_LOGICO = SMALLINT DEFAULT 0 NOT NULL CHECK (value between 0 and 1) */
);




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE SYS_SISTEMA_ROTINA ADD CONSTRAINT PK_SYS_SISTEMA_ROTINA PRIMARY KEY (SIS_COD, ROT_COD);


/******************************************************************************/
/***                              Foreign Keys                              ***/
/******************************************************************************/

ALTER TABLE SYS_SISTEMA_ROTINA ADD CONSTRAINT FK_SYS_SISTEMA_ROTINA_ROT FOREIGN KEY (ROT_COD) REFERENCES SYS_ROTINA (ROT_COD) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE SYS_SISTEMA_ROTINA ADD CONSTRAINT FK_SYS_SISTEMA_ROTINA_SIS FOREIGN KEY (SIS_COD) REFERENCES SYS_SISTEMA (SIS_COD) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/***                              Descriptions                              ***/
/******************************************************************************/

COMMENT ON TABLE SYS_SISTEMA_ROTINA IS 
'Tabela Sistema x Rotina.

    Autor   :   Isaque Marinho Ribeiro
    Data    :   17/06/2014

Tabela responsavel por associar o(s) com a(s) rotina(s) que o sistema pode acessar.';



/******************************************************************************/
/***                          Fields descriptions                           ***/
/******************************************************************************/

COMMENT ON COLUMN SYS_SISTEMA_ROTINA.SIS_COD IS 
'Sistema.';

COMMENT ON COLUMN SYS_SISTEMA_ROTINA.ROT_COD IS 
'Rotina.';

COMMENT ON COLUMN SYS_SISTEMA_ROTINA.ACESSO IS 
'Rotina Liberada para o Sistema:
0 - Nao
1 - Sim';



/******************************************************************************/
/***                               Privileges                               ***/
/******************************************************************************/


/* Privileges of users */
GRANT ALL ON SYS_SISTEMA_ROTINA TO PUBLIC;

SET TERM ^ ;

create or alter procedure SET_SISTEMA (
    CODIGO DMN_SMALLINT_NN,
    NOME DMN_VCHAR_100,
    VERSAO DMN_VCHAR_10)
as
begin
  if (not exists(
    Select
      s.sis_cod
    from SYS_SISTEMA s
    where s.sis_cod = :codigo
  )) then
    Insert Into SYS_SISTEMA (
        sis_cod
      , sis_nome
      , sis_versao
    ) values (
        :codigo
      , trim(:nome)
      , trim(:versao)
    );
  else
    Update SYS_SISTEMA s Set
        s.sis_nome   = trim(:nome)
      , s.sis_versao = trim(:versao)
    where s.sis_cod = :codigo;
end^

SET TERM ; ^

COMMENT ON PARAMETER SET_SISTEMA.CODIGO IS
'Codigo';

COMMENT ON PARAMETER SET_SISTEMA.NOME IS
'Nome do Sistema';

COMMENT ON PARAMETER SET_SISTEMA.VERSAO IS
'Versao';

/* Following GRANT statetements are generated automatically */

GRANT SELECT,INSERT,UPDATE ON SYS_SISTEMA TO PROCEDURE SET_SISTEMA;

/* Existing privileges on this procedure */

GRANT EXECUTE ON PROCEDURE SET_SISTEMA TO "PUBLIC";
GRANT EXECUTE ON PROCEDURE SET_SISTEMA TO SYSDBA;

SET TERM ^ ;

create or alter procedure SET_ROTINA (
    SISTEMA DMN_SMALLINT_NN,
    CODIGO DMN_VCHAR_10,
    TIPO DMN_SMALLINT_N,
    DESCRICAO DMN_VCHAR_250,
    ROTINA_PAI DMN_VCHAR_10)
as
begin
  /* Gravar Rotina */

  if (not exists(
    Select
      r.rot_cod
    from SYS_ROTINA r
    where r.rot_cod = trim(:rotina_pai)
  )) then
    rotina_pai = '';

  if (not exists(
    Select
      r.rot_cod
    from SYS_ROTINA r
    where r.rot_cod = trim(:codigo)
  )) then
    Insert Into SYS_ROTINA (
        rot_cod
      , rot_tipo
      , rot_descricao
      , rot_cod_pai
    ) values (
        trim(:codigo)
      , coalesce(:tipo, 0)
      , trim(:descricao)
      , case when trim(:rotina_pai) <> '' then trim(:rotina_pai) else null end
    );
  else
    Update SYS_ROTINA r Set
        r.rot_tipo      = coalesce(:tipo, 0)
      , r.rot_descricao = trim(:descricao)
      , r.rot_cod_pai   = case when trim(:rotina_pai) <> '' then trim(:rotina_pai) else null end
    where r.rot_cod = trim(:codigo);

  /* Gravar Associacao Rotina x Sistema */
  if ( coalesce(:sistema, -1) > -1 ) then
    if (not exists(
      Select
        s.acesso
      from SYS_SISTEMA_ROTINA s
      where s.sis_cod = :sistema
        and s.rot_cod = :codigo
    )) then
      Insert Into SYS_SISTEMA_ROTINA (
          sis_cod
        , rot_cod
        , acesso
      ) values (
          :sistema
        , :codigo
        , 1
      );
end^

SET TERM ; ^

/* Following GRANT statetements are generated automatically */

GRANT SELECT,INSERT,UPDATE ON SYS_ROTINA TO PROCEDURE SET_ROTINA;
GRANT SELECT,INSERT ON SYS_SISTEMA_ROTINA TO PROCEDURE SET_ROTINA;

/* Existing privileges on this procedure */

GRANT EXECUTE ON PROCEDURE SET_ROTINA TO "PUBLIC";
GRANT EXECUTE ON PROCEDURE SET_ROTINA TO SYSDBA;

